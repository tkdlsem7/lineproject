// üìÅ src/hooks/useEquipment.ts
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import axios from 'axios';

import {
  fetchEquipment,   // GET  /api/equipment/:machineId
  saveEquipment,    // POST /api/equipment   (UPSERT)
} from '../Equipment/equipment';
import type { EquipmentDTO } from '../Equipment/equipment';

/* ------------------------------------------------------------------ */
/* ü™ù useEquipment                                                     */
/*   ‚ë† machineId Í∞Ä ÏûàÏúºÎ©¥: GET ÏöîÏ≤≠ ‚Üí Ïû•ÎπÑ Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò¥                */
/*      ‚îÄ 200: data = EquipmentDTO                                    */
/*      ‚îÄ 404: data = null   (‚Äª Ïã†Í∑ú ÏûÖÎ†• Ìèº)                           */
/*   ‚ë° save() Ìò∏Ï∂ú: POST ÏöîÏ≤≠ ‚Üí INSERT or UPDATE                      */
/*      ÏÑ±Í≥µ Ïãú React-Query Ï∫êÏãúÎ•º ÏµúÏã† Îç∞Ïù¥ÌÑ∞Î°ú Í∞±Ïã†                  */
/* ------------------------------------------------------------------ */
export const useEquipment = (machineId?: string) => {
  const qc = useQueryClient();
  const queryKey = ['equipment', machineId]; // Ï∫êÏãú ÌÇ§

  /* -------------------------------------------------------------- */
  /* 1) Îã®Í±¥ Ï°∞Ìöå (GET)                                              */
  /* -------------------------------------------------------------- */
  const query = useQuery<EquipmentDTO | null>({
    queryKey,
    enabled: !!machineId, // machineId ÏóÜÏúºÎ©¥ Ìò∏Ï∂úÌïòÏßÄ ÏïäÏùå (/new Í≤ΩÎ°ú)
    /* ---------------- queryFn ---------------- */
    queryFn: async () => {
      if (!machineId) return null; // ÏïàÏ†ÑÏû•Ïπò

      try {
        // 200 OK ‚Üí EquipmentDTO Î¶¨ÌÑ¥
        return await fetchEquipment(machineId);
      } catch (err) {
        /* 404 Not Found ‚Üí Í∏∞Ï°¥ Î†àÏΩîÎìúÍ∞Ä ÏóÜÎã§Îäî ÏùòÎØ∏Ïù¥ÎØÄÎ°ú
           Ïò§Î•òÎ°ú Ï≤òÎ¶¨ÌïòÏßÄ ÏïäÍ≥† null Î∞òÌôòÌïòÏó¨ 'Îπà Ìèº' ÏúºÎ°ú Ï†ÑÌôò     */
        if (axios.isAxiosError(err) && err.response?.status === 404) {
          return null;
        }
        // Í∑∏ Ïô∏(500 Îì±)Îäî ÏßÑÏßú Ïò§Î•ò ‚Üí ÏÉÅÏúÑ Ïª¥Ìè¨ÎÑåÌä∏ÏóêÏÑú error Ï≤òÎ¶¨
        throw err;
      }
    },
  });

  /* -------------------------------------------------------------- */
  /* 2) Ï†ÄÏû• (UPSERT)                                                */
  /* -------------------------------------------------------------- */
  const mutation = useMutation({
    /* saveEquipment(payload) Îäî POST /api/equipment
       ‚Üí Î∞±ÏóîÎìúÏóêÏÑú Ï°¥Ïû¨ÌïòÎ©¥ UPDATE, ÏóÜÏúºÎ©¥ INSERT                  */
    mutationFn: (payload: EquipmentDTO) => saveEquipment(payload),

    /* Ï†ÄÏû• ÏÑ±Í≥µ Ïãú: ÏÑúÎ≤ÑÍ∞Ä ÎèåÎ†§Ï§Ä ÏµúÏã† Îç∞Ïù¥ÌÑ∞Î•º Ï∫êÏãúÏóê Ï¶âÏãú Î∞òÏòÅ
       ‚Üí ÌôîÎ©¥Ïù¥ ÏûêÎèôÏúºÎ°ú Í∞±Ïã†ÎêòÍ≥†, Îí§Î°úÍ∞ÄÍ∏∞Î°ú ÎèåÏïÑÍ∞ÄÎèÑ Î∞©Í∏à ÏàòÏ†ï
         ÎÇ¥Ïö©Ïù¥ Í∑∏ÎåÄÎ°ú Î≥¥Ïù¥Îäî UX Î≥¥Ïû•                               */
    onSuccess: (saved: EquipmentDTO) => {
      qc.setQueryData(queryKey, saved);
    },

    /* ÌïÑÏöîÌïòÎã§Î©¥ onError(Ïû¨ÏãúÎèÑ)¬∑onSettled Îì±ÎèÑ Ï∂îÍ∞Ä Í∞ÄÎä•            */
  });

  /* -------------------------------------------------------------- */
  /* 3) ÌõÖÏù¥ Î∞òÌôòÌïòÎäî Í∞íÎì§                                            */
  /* -------------------------------------------------------------- */
  return {
    /* ‚îÄ GET ÏÉÅÌÉú ‚îÄ */
    data:        query.data,          // EquipmentDTO | null
    isPending:   query.isLoading,     // Î°úÎî© ÌîåÎûòÍ∑∏ (Ïù¥Ï†Ñ Î™ÖÏπ≠ Ïú†ÏßÄ)
    error:       query.error,         // 404 Îäî Í±∏Î¶¨ÏßÄ ÏïäÏùå

    /* ‚îÄ POST ÏÉÅÌÉú ‚îÄ */
    save:   mutation.mutateAsync,     // async (payload) => void
    saving: mutation.isPending,       // POST in-flight Ïó¨Î∂Ä
  };
};
